0#!/bin/java

//Short cut and menu entry for specific marker. You need to modify these according to the object list were modify.
//example macro "Readable name [1]"{ojSwitchToItem("object_name");}
macro "crustose_coralline_algae [1]"{ojSwitchToItem("cca");}
macro "articulated_calcareous_algae [2]"{ojSwitchToItem("bca");}
macro "red_corticated_macrophytes [4]"{ojSwitchToItem("gelidium_like");}
macro "red_encrusting [5]"{ojSwitchToItem("peyssonnelia_like");}
macro "brown_corticated_foliose [6]"{ojSwitchToItem("padina_like");}
macro "brown_foliose [7]"{ojSwitchToItem("dictyota_like");}
macro "green_foliose [8]"{ojSwitchToItem("ulva_like");}
macro "brown_turf [9]"{ojSwitchToItem("turf_like");}
macro "brown_biofilms  [0]"{ojSwitchToItem("biofilm_like");}

macro "ascidians [q]"{ojSwitchToItem("ascidians");}
macro "spirorbis [w]"{ojSwitchToItem("spirorbis");}
macro "serpulids [e]"{ojSwitchToItem("serpulids");}
macro "annelids [r]"{ojSwitchToItem("annelids");}
macro "sponge [t]"{ojSwitchToItem("sponge");}
macro "bryozoans [y]"{ojSwitchToItem("bryozoans");}
macro "barnacles [u]"{ojSwitchToItem("barnacles");}
macro "gastropods [a]"{ojSwitchToItem("gastropods");}

macro "bare [z]"{ojSwitchToItem("bare");}
macro "off [o]"{ojSwitchToItem("off");}

//Prepare some variable for later
//Prepare variable for file name
dir=getDirectory("image");
name = getTitle() + "PointCoordinates.txt";
//check if file exists
check = File.exists(dir+name);

//adding, hiding an removing labels and point
macro "Update Initials [i]"{ 
	updateMyLabels(false);
}

macro "Update Labels [l]"{
	updateMyLabels(true);
}


macro "Hide Labels [h]"{
	run("Hide Overlay");
}


function updateMyLabels(wholeStr){
	fontSize = 24;
	first = true;
	for (obj = 1; obj <= ojNObjects(); obj++){
		if (ojOwnerIndex(obj) == ojImageLink()){
			ojSelectObject(obj);
			slc = ojZPos(1);
			x = ojXPos(1);
			y = ojYPos(1);
			if (getSliceNumber == slc){
				if (first)
//					run("Remove Overlay");
				first = false;
				makeOval(x-10, y-10, 20, 20);
				s = ojGetItemName();
				color = "yellow";
				if (!wholeStr) s = substring(s, 0, 1);
				makeText(s, x + 4, y-fontSize/2);
				run("Properties... ", "name=[] position=none stroke=&color font="+fontSize+" fill=none");
				run("Add Selection...");
				run("Select None");
			}
		}
	}
	ojSelectObject(0);
}

macro "Clear all to start again"{
	run("Remove Overlay");
	//Prepare variable for file name
	dir=getDirectory("image");
	name = getTitle() + "PointCoordinates.txt";
	//check if file exists
	check = File.exists(dir+name);
//	itemNames = split(ojGetItemNames());
//	nTypes = itemNames.length;
//	for (m=1; m < nTypes; m++){ojDeleteItem(nTypes, m);
//	}
//	ojDeleteObject(1)
	if (check == 1){
	    getDateAndTime(year, month, dayOfWeek, dayOfMonth, hour, minute, second, msec);
	    time = (year + month + dayOfMonth + hour+minute+second);
	    File.rename(dir+name,dir+name+time);
	}
}   

//Produce the count Results
macro "Show Count Results"{
	run("Clear Results");
	itemNames = split(ojGetItemNames());
	maxImg = ojNImages();
	nTypes = itemNames.length;
	totalCounts = newArray(nTypes);
	for (img = 1; img <= maxImg; img++){
		fname  = ojGetImageName(img);
		itemCounts = newArray(nTypes);
		setResult("Label", img-1, fname);
		for (obj = ojFirstObject(img); obj <= ojLastObject(img); obj++){
			ojSelectObject(obj);
			
			for (kk = 0; kk < nTypes; kk++){
				name = ojGetItemName();
				if (name == itemNames[kk]){
					itemCounts[kk]++;
					totalCounts[kk]++;
				}
			}	
		}
		for (kk = 0; kk < nTypes; kk++)
			setResult(itemNames[kk], img - 1, itemCounts[kk]);
	}
	setResult("Label", maxImg, "__Total__");
	for (kk = 0; kk < nTypes; kk++)
		setResult(itemNames[kk], maxImg, totalCounts[kk]);
	updateResults;
	ojSelectObject(0);
	selectWindow("Results");
}

//*****************
//Draw random points
//Ask the user for the number of point, default 64
var n=50
macro "Set the number of points (default 50) [n]"{
	Dialog.create("Enter the number of points ");
	Dialog.addNumber("Number",n);
	Dialog.show();
	n = Dialog.getNumber();
}

// draw the number of points defined earlier
macro "Draw Random Points [p]"{
	Overlay.remove;
	dotSize = 25;
	setLineWidth(5);
	setColor(255,0,0);
	width = getWidth();
	height = getHeight();
	//Prepare variable for file name
	dir=getDirectory("image");
	name = getTitle() + "PointCoordinates.txt";
//check if coordinate file exists
	check = File.exists(dir+name);
	if (check == 0){
	  f = File.open(dir+name);
	  for (j=0; j<(n); j++) {
	  x = random()*width-dotSize/2;
	  X=abs(x);
	  y = random()*height-dotSize/2;
	  Y=abs(y);
	  print(f,X+ "\t" + Y);
	  Overlay.drawEllipse(X, Y, dotSize, dotSize);
	}
	File.close(f);
	} else {
	  filestring=File.openAsString(dir+name);
	  rows=split(filestring, "\n");
	  x=newArray(rows.length);
	  y=newArray(rows.length);
	  for(ii=0; ii<rows.length; ii++){
	    columns=split(rows[ii],"\t");
	    x[ii]=parseInt(columns[0]);
	    y[ii]=parseInt(columns[1]);
	    Overlay.drawEllipse(x[ii], y[ii], dotSize, dotSize);
	  } 
	}
	Overlay.show;
}

//*****************
//Draw a grid


macro "Draw points on a grid [g]"{
//Prepare to Draw drawEllipse
	Overlay.remove;
	dotSize = 25;
	setLineWidth(5);
	setColor(255,0,0);
//
//read the position of the quadrats from user input
	run("Select None");
	setTool("polygon");
	selectWindow(getTitle());
	waitForUser("Draw a polygon of your quadrats from the left top, right top, bottom right and bottom left corners and then press ok");
	getSelectionCoordinates(x, y);
	tlx=x[0];
	tly=y[0];
	trx=x[1];
	try=y[1];
	brx=x[2];
	bry=y[2];
	blx=x[3];
	bly=y[3];
//
	if (blx == tlx || trx == brx) {
	//	print("this is a bug triggered by perfectly vertical frames on your quadrats, try redrawing the frames");

		//calculate the equation describing the top frame
		slopeTop = (try - tly)/(trx-tlx);
		interceptTop = tly-(slopeTop*tlx);

		//calculate the equation describing the bottom frame
		slopeBottom = (bry-bly)/(brx-blx);
		interceptBottom = bly-(slopeBottom*blx);
	
	//determine the crossing point of the top and bottom (horizontal) tbx and tby
		tbx=(interceptBottom-interceptTop)/(slopeTop-slopeBottom);
		tby=slopeBottom*tbx+interceptBottom;
		//print(tbx,tby);

	//
	//determine the equation of all vertical lines
	//store the results in an array
		verticalEquation = newArray(8);
		
		//calculate the distance between blx and brx , divide by 9
		horizontalShift = abs((blx-brx)/9);
		
		//determine the equations which are really only in the form of x= constant
		if (blx < brx){
			for (i=0;i<8;i++){
			verticalEquation[i]=blx+horizontalShift*(i+1);
			}
		}
		else {
			for (i=0;i<8;i++){
			verticalEquation[i]=blx-horizontalShift*(i+1);
			}
		}
		
	//	Array.show(xInterval);

	//Draw each vertical line
	//	for (i=0;i<8;i++){
	//	Overlay.drawLine(verticalEquation[i],0,verticalEquation,getHeight();
	//	}

	//
	//determine the difference between the intercept of the top and bottom frame and divide by 9 to get 8 interval on the vertical 
		yInterval= newArray(8);
		if (interceptBottom > interceptTop){
		verticalShift=(interceptBottom-interceptTop)/9;
	//	print(verticalShift);
		  for (j=0;j<8;j++){
		  yInterval[j]=interceptBottom-verticalShift*(j+1);
	//	  print("yInterval", yInterval[j]);
		  }
		}
		else {
		verticalShift=(interceptTop-interceptBottom)/9;
		 for (j=0;j<8;j++){
		   yInterval[j]=interceptTop-verticalShift*(j+1);
	//	   print("yInterval", yInterval[j]);
		 }
		}
	//	Array.show(yInterval);

	//Draw each horizontal lines
	//	for (i=0;i<8;i++){
	//	Overlay.drawLine(0,yInterval[i],tbx,tby);
	//	}
		
	//determine the equation of all horizontal line
		horizontalSlope=newArray(8);
		horizontalIntercept=newArray(8);
		for (k=0;k<8;k++){
		  horizontalSlope[k]=(tby-yInterval[k])/tbx;
		  horizontalIntercept[k]=yInterval[k];
	//	  print("horizontalSlope",horizontalSlope[k]);
	//	  print("horizontalIntercept",horizontalIntercept[k]);
		}
	//	Array.show(horizontalSlope);
	//	Array.show(horizontalIntercept);

	//Determine the crossing point of each line
		for (ii=0;ii<8;ii++){
		  for (jj=0;jj<8;jj++){
			x=verticalEquation[ii];
			y=horizontalSlope[jj]*x+horizontalIntercept[jj];
	//	    print(x,y);
			Overlay.drawEllipse(x, y, dotSize, dotSize);
		  }
		}
	Overlay.show; 
	}
	else {
	//calculate the equation describing the top frame
		slopeTop = (try - tly)/(trx-tlx);
		interceptTop = tly-(slopeTop*tlx);
	//	print("Top",slopeTop,interceptTop);
	//calculate the equation describing the right frame
		if (trx == brx){
		  print("this is a bug triggered by perfectly vertical right frame, try redrawing your quadrat");
		}
		else {
		slopeRight = (bry-try)/(brx-trx);
		interceptRight = try-(slopeRight*trx);
		}
	//	print("Right",slopeRight,interceptRight);
	//calculate the equation describing the bottom frame
		slopeBottom = (bry-bly)/(brx-blx);
		interceptBottom = bly-(slopeBottom*blx);
	//	print("Bottom",slopeBottom,interceptBottom);
	//calculate the equation describing the left frame
		if (blx == tlx){
		  print("this is a bug triggered by perfectly vertical left frame, try redrawing your quadrat");
		}
		else {
		slopeLeft= (bly-tly)/(blx-tlx);
		interceptLeft = tly-(slopeLeft*tlx);
	//	print("Left",slopeLeft,interceptLeft);
	//
	//determine the crossing point of the top and bottom (horizontal) tbx and tby
		tbx=(interceptBottom-interceptTop)/(slopeTop-slopeBottom);
		tby=slopeBottom*tbx+interceptBottom;
		//print(tbx,tby);
	//determine the crossing point of the left and right lrx and lry
		lrx=(interceptRight-interceptLeft)/(slopeLeft-slopeRight);
		lry=slopeLeft*lrx+interceptLeft;
	//	Overlay.drawEllipse(lrx,lry,50,50);
	//
	//determine the difference between the intercept of the left and right frame and divide by 9 to get 8 interval on the horizontal 
	//store the results in an array
		xInterval = newArray(8);
	//need to determine the shape of the quadrats
		a=-interceptRight/slopeRight;
		b=-interceptLeft/slopeLeft;
	//	print(a,b)
		if (a > b){
	//	  print("TRUE");
		  horizontalShift=((-interceptRight/slopeRight)+(interceptLeft/slopeLeft))/9;
	//	  print(horizontalShift);
	//determine the y=0 x position for each vertical lines
		  for (i=0;i<8;i++){
			 xInterval[i]=(0-interceptLeft/slopeLeft)+horizontalShift*(i+1);
	//	     print("xInterval",xInterval[i]);  
		  }
		}
		else {
		  horizontalShift=((interceptRight/slopeRight)-(interceptLeft/slopeLeft))/9;
	//	  print(horizontalShift);
		  for (i=0;i<8;i++){
		  xInterval[i]=(0-interceptRight/slopeRight)+horizontalShift*(i+1);
	//	  print("xInterval",xInterval[i]);      
		  }
		}
	//	Array.show(xInterval);

	//Draw each vertical line
	//	for (i=0;i<8;i++){
	//	Overlay.drawLine(xInterval[i],0,lrx,lry);
	//	}

	//determin the equation of all vertical line
		verticalSlope=newArray(8);
		verticalIntercept=newArray(8);
		for (j=0;j<8;j++){
		  verticalSlope[j]=(lry)/(lrx-xInterval[j]);
		  verticalIntercept[j]=lry-verticalSlope[j]*lrx;
	//	  print("verticalSlope",verticalSlope[j]);
	//	  print("verticalIntercept",verticalIntercept[j]);
		}
	//	Array.show(verticalSlope);
	//	Array.show(verticalIntercept);
	//
	//determine the difference between the intercept of the top and bottom frame and divide by 9 to get 8 interval on the vertical 
		yInterval= newArray(8);
		if (interceptBottom > interceptTop){
		verticalShift=(interceptBottom-interceptTop)/9;
	//	print(verticalShift);
		  for (j=0;j<8;j++){
		  yInterval[j]=interceptBottom-verticalShift*(j+1);
	//	  print("yInterval", yInterval[j]);
		  }
		}
		else {
		verticalShift=(interceptTop-interceptBottom)/9;
		 for (j=0;j<8;j++){
		   yInterval[j]=interceptTop-verticalShift*(j+1);
	//	   print("yInterval", yInterval[j]);
		 }
		}
	//	Array.show(yInterval);

	//Draw each horizontal lines
	//	for (i=0;i<8;i++){
	//	Overlay.drawLine(0,yInterval[i],tbx,tby);
	//	}
		
	//determine the equation of all horizontal line
		horizontalSlope=newArray(8);
		horizontalIntercept=newArray(8);
		for (k=0;k<8;k++){
		  horizontalSlope[k]=(tby-yInterval[k])/tbx;
		  horizontalIntercept[k]=yInterval[k];
	//	  print("horizontalSlope",horizontalSlope[k]);
	//	  print("horizontalIntercept",horizontalIntercept[k]);
		}
	//	Array.show(horizontalSlope);
	//	Array.show(horizontalIntercept);

	//Determine the crossing point of each line
		for (ii=0;ii<8;ii++){
		  for (jj=0;jj<8;jj++){
			x=(horizontalIntercept[ii]-verticalIntercept[jj])/(-horizontalSlope[ii]+verticalSlope[jj]);
			y=horizontalSlope[ii]*x+horizontalIntercept[ii];
	//	    print(x,y);
			Overlay.drawEllipse(x, y, dotSize, dotSize);
		  }
		}
	Overlay.show;     

	}
}  
