//Short cut and menu entry for specific marker. You need to modify these if the object list were modify.
macro "Healthy Coral [1]"{ojSwitchToItem("healthy_coral");}
macro "Bleached Coral [2]"{ ojSwitchToItem("bleached_coral");}
macro "Dead Coral [3]"{ ojSwitchToItem("dead_coral");}
macro "Branched coralline algae[q]"{ojSwitchToItem("branched_coralline_algae");}
macro "Crustose Coralline algae [w]"{ojSwitchToItem("crustose_coralline_algae");}
macro "Obamoku [e]"{ojSwitchToItem("Obamoku_Sargassum_ringoldianum");}
macro "Makusa [a]"{ojSwitchToItem("Makusa_Gelidium_sp");}
macro "Fukuronori [s]"{ojSwitchToItem("Fukuronori_Colpomenia_sinuosa");}
macro "Akamoku [d]"{ojSwitchToItem("Akamoku_Sargassum_horneri");}
macro "Kajime [z]"{ojSwitchToItem("Kajime_Ecklonia_cava");}
macro "Arame [x]"{ojSwitchToItem("Arame_Eisenia_bicyclis");}
macro "Algae other [c]"{ojSwitchToItem("Algae_other");}
macro "Bare substrate [4]"{ojSwitchToItem("bare_substrate");}
macro "Off limit [5]"{ojSwitchToItem("off");}
macro "Umiuchiwa [r]"{ojSwitchToItem("Umiuchiwa_Padina_arborescens");}
macro "Wakame [f]"{ojSwitchToItem("Wakame_Undaria");}


//Prepare some variable for later
//Prepare variable for file name
dir=getDirectory("image");
name = getTitle() + "PointCoordinates.txt";
//check if file exists
check = File.exists(dir+name);

//adding, hiding an removing labels and point
macro "Update Initials [7]"{ 
	updateMyLabels(false);
}

macro "Update Labels [8]"{
	updateMyLabels(true);
}


macro "Hide Labels [9]"{
	run("Hide Overlay");
}


function updateMyLabels(wholeStr){
	fontSize = 18;
	first = true;
	for (obj = 1; obj <= ojNObjects(); obj++){
		if (ojOwnerIndex(obj) == ojImageLink()){
			ojSelectObject(obj);
			slc = ojZPos(1);
			x = ojXPos(1);
			y = ojYPos(1);
			if (getSliceNumber == slc){
				if (first)
					run("Remove Overlay");
				first = false;
				makeOval(x-10, y-10, 20, 20);
				s = ojGetItemName();
				color = "black";
				if (!wholeStr) s = substring(s, 0, 1);
				makeText(s, x + 4, y-fontSize/2);
				run("Properties... ", "name=[] position=none stroke=&color font="+fontSize+" fill=none");
				run("Add Selection...");
				run("Select None");
			}
		}
	}
	ojSelectObject(0);
}

macro "Clear all to start again"{
	run("Remove Overlay");
	//Prepare variable for file name
	dir=getDirectory("image");
	name = getTitle() + "PointCoordinates.txt";
	//check if file exists
	check = File.exists(dir+name);
//	itemNames = split(ojGetItemNames());
//	nTypes = itemNames.length;
//	for (m=1; m < nTypes; m++){ojDeleteItem(nTypes, m);
//	}
//	ojDeleteObject(1)
	if (check == 1){
	    getDateAndTime(year, month, dayOfWeek, dayOfMonth, hour, minute, second, msec);
	    time = (year + month + dayOfMonth + hour+minute+second);
	    File.rename(dir+name,dir+name+time);
	}
}   

//Produce the count Results
macro "Show Count Results"{
	run("Clear Results");
	itemNames = split(ojGetItemNames());
	maxImg = ojNImages();
	nTypes = itemNames.length;
	totalCounts = newArray(nTypes);
	for (img = 1; img <= maxImg; img++){
		fname  = ojGetImageName(img);
		itemCounts = newArray(nTypes);
		setResult("Label", img-1, fname);
		for (obj = ojFirstObject(img); obj <= ojLastObject(img); obj++){
			ojSelectObject(obj);
			
			for (kk = 0; kk < nTypes; kk++){
				name = ojGetItemName();
				if (name == itemNames[kk]){
					itemCounts[kk]++;
					totalCounts[kk]++;
				}
			}	
		}
		for (kk = 0; kk < nTypes; kk++)
			setResult(itemNames[kk], img - 1, itemCounts[kk]);
	}
	setResult("Label", maxImg, "__Total__");
	for (kk = 0; kk < nTypes; kk++)
		setResult(itemNames[kk], maxImg, totalCounts[kk]);
	updateResults;
	ojSelectObject(0);
	selectWindow("Results");
}

//*****************
//Draw random points
//Ask the user for the number of point, default 64
var n=50
macro "Set the number of points (default 50) [n]"{
	Dialog.create("Enter the number of points ");
	Dialog.addNumber("Number",n);
	Dialog.show();
	n = Dialog.getNumber();
}

// draw the number of points defined earlier
macro "Draw Random Points [0]"{
	Overlay.remove;
	dotSize = 25;
	setLineWidth(5);
	setColor(255,0,0);
	width = getWidth();
	height = getHeight();
	//Prepare variable for file name
	dir=getDirectory("image");
	name = getTitle() + "PointCoordinates.txt";
//check if coordinate file exists
	check = File.exists(dir+name);
	if (check == 0){
	  f = File.open(dir+name);
	  for (j=0; j<(n*n); j++) {
	  x = random()*width-dotSize/2;
	  X=abs(x);
	  y = random()*height-dotSize/2;
	  Y=abs(y);
	  print(f,X+ "\t" + Y);
	  Overlay.drawEllipse(X, Y, dotSize, dotSize);
	}
	File.close(f);
	} else {
	  filestring=File.openAsString(dir+name);
	  rows=split(filestring, "\n");
	  x=newArray(rows.length);
	  y=newArray(rows.length);
	  for(ii=0; ii<rows.length; ii++){
	    columns=split(rows[ii],"\t");
	    x[ii]=parseInt(columns[0]);
	    y[ii]=parseInt(columns[1]);
	    Overlay.drawEllipse(x[ii], y[ii], dotSize, dotSize);
	  } 
	}
	Overlay.show;
}

//*****************
//Draw a grid
macro "Draw points on a grid [-]"{
  Overlay.remove;
  dotSize = 25;
  setLineWidth(5);
  setColor(255,0,0);
  width = getWidth();
  height = getHeight();
  xinter = width/9;
  yinter = height/9;
  for(jj=1;jj<9; jj++){
    for(kk=1;kk<9;kk++){
      x=0+xinter*kk-dotSize/2;
	print(x);
      y=0+yinter*jj-dotSize/2;
      Overlay.drawEllipse(x, y, dotSize, dotSize);
    }
  }
Overlay.show;
}


macro "test [t]"{
//define infinity
  Infinity = 1.0/0.0; 
//read the position of the quadrats from user input
	run("Select None");
	waitForUser("Draw a polygon of your quadrats using the polygon tools and then press ok");
	getSelectionCoordinates(x, y);
	  tlx=x[0];
	  tly=y[0];
	  trx=x[1];
	  try=y[1];
	  brx=x[2];
	  bry=y[2];
	  blx=x[3];
	  bly=y[3];
	  print(tlx,trx,blx,brx);
	  print(tly,try,bly,bry);
Overlay.remove;
	dotSize = 25;
	setLineWidth(5);
	setColor(255,0,0);
//calculate the equation describing the top frame
	slopeTop = (try - tly)/(trx-tlx);
	print(slopeTop,"slopeTop");
	interceptTop = tly-(slopeTop*tlx);
	print(interceptTop,"interceptTop");
//calculate the equation describing the right frame
	slopeRight = (bry-try)/(brx-trx);
	print(slopeRight,"slopeRight");
	interceptRight = try-(slopeRight*trx);
	print(interceptRight,"interceptRight");
//calculate the equation describing the bottom frame
	slopeBottom = (bry-bly)/(brx-blx);
	print(slopeBottom,"slopeBottom");
	interceptBottom = bly-(slopeBottom*blx);
	print(interceptBottom,"interceptBottom");
//calculate the equation describing the left frame
	slopeLeft= (bly-tly)/(blx-tlx);
	print(slopeLeft,"slopeLeft");
	interceptLeft = tly-(slopeLeft*tlx);
	print(interceptLeft,"interLeptLeft");
//determine the shift to apply to the intercepts for 8*8 points within the quadrats
//topShift is the difference between the intercept of the top and bottom frame
	topShift=(interceptBottom-interceptTop)/9;
	print(topShift,"topShift")
//leftShift is the difference between the intercept of the left and right bottom frame
//	if(interceptRight=Infinity || interceptLeft=Infinity){
//	  LeftShift=(trx-tlx)/9;
//	}else{
	  leftShift=(interceptLeft-interceptRight)/9;
//	}
	print(leftShift,"leftShift")
//determine the position of each points starting from the top left corner
      for(jj=1;jj<9; jj++){
	for(kk=1;kk<9;kk++){
	  x=((interceptLeft+leftShift*kk)-(interceptTop+topShift*jj))/(slopeTop-slopeLeft);
	  y=x*slopeTop+(interceptTop+topShift*jj);
	  print(x,y);
	  Overlay.drawEllipse(x, y, dotSize, dotSize);
	}
      }
Overlay.show;     
}
